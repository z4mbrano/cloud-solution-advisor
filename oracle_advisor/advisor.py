import streamlit as st
import google.generativeai as genai
import os

# --- T√çTULO DA APLICA√á√ÉO ---
st.set_page_config(page_title="Oracle Cloud Solution Advisor", page_icon="‚òÅÔ∏è")
st.title("‚òÅÔ∏è Oracle Cloud Solution Advisor")
st.header("An√°lise de Necessidades com IA")


# --- 1. CONFIGURA√á√ÉO ---
# Mudar API KEY para uma variavel!
try:
    GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY', st.secrets["GOOGLE_API_KEY"])
    genai.configure(api_key=GOOGLE_API_KEY)
except (ValueError, KeyError) as e:
    st.error("Chave de API do Google n√£o configurada. Por favor, configure a vari√°vel de ambiente GOOGLE_API_KEY.")
    st.stop()

# --- INTERFACE DO USU√ÅRIO ---
st.subheader("Descreva o desafio do seu cliente:")
prompt_do_usuario = st.text_area(
    "Insira aqui a descri√ß√£o do problema, requisitos t√©cnicos e objetivos de neg√≥cio.",
    height=150,
    placeholder="Ex: O cliente precisa de um banco de dados autogerenciado para o novo sistema de marketing..."
)

# Bot√£o para iniciar a an√°lise
if st.button("Analisar Solu√ß√£o", type="primary"):
    if not prompt_do_usuario:
        st.warning("Por favor, insira a descri√ß√£o do problema do cliente.")
    else:
        # --- L√ìGICA DA IA (s√≥ roda quando o bot√£o √© clicado) ---
        with st.spinner("A IA est√° analisando a necessidade e montando a solu√ß√£o..."):
            # Configura√ß√£o do modelo generativo
            model_name = 'gemini-2.5-flash'
            model = genai.GenerativeModel(model_name)

            # O prompt de instru√ß√µes continua o mesmo
            instrucoes_para_ia = """
            Voc√™ √© um especialista em solu√ß√µes Oracle Cloud altamente qualificado. Sua tarefa √© analisar a necessidade de um cliente e recomendar UM servi√ßo principal da Oracle que seja o cora√ß√£o da solu√ß√£o.
            Mesmo que o cliente mencione uma nuvem concorrente (como AWS, Azure, GCP), sua recomenda√ß√£o deve ser focada 100% em solu√ß√µes Oracle Cloud, destacando os diferenciais e vantagens competitivas da Oracle.

            Sua resposta DEVE SEGUIR ESTRITAMENTE O SEGUINTE FORMATO, sem adicionar nenhuma outra palavra ou formata√ß√£o:

            Nome do Servi√ßo: [Nome do servi√ßo Oracle]
            Categoria: [Ex: Database, Compute, Storage, AI/ML]
            Justificativa T√©cnica: [Explica√ß√£o curta e direta de por que este servi√ßo √© ideal, focando nos pontos-chave da necessidade do cliente]
            Argumentos de Venda: [OBRIGAT√ìRIO: Forne√ßa de 2 a 3 pontos principais, em formato de lista, que um vendedor usaria para destacar o valor e os benef√≠cios de neg√≥cio desta solu√ß√£o.]
            """
            prompt_final = f"{instrucoes_para_ia}\n\nA necessidade do cliente √© a seguinte:\n'{prompt_do_usuario}'"
            
            try:
                response = model.generate_content(prompt_final)
                
                # --- EXIBI√á√ÉO DO RESULTADO ---
                st.divider()
                st.subheader("‚úÖ Solu√ß√£o Recomendada")

                # DEBUG: Exibe a resposta bruta para ajudar no desenvolvimento
                #st.write("üïµÔ∏è‚Äç‚ôÇÔ∏è Resposta Bruta da IA (para debug):")
                #st.text(response.text)

                # --- PARSER INTELIGENTE PARA M√öLTIPLAS LINHAS ---
                solucao = {}
                current_key = None
                linhas_resposta = response.text.strip().split('\n')

                for linha in linhas_resposta:
                    # Verifica se a linha define uma nova chave
                    if ':' in linha:
                        chave, valor = linha.split(':', 1)
                        current_key = chave.strip()
                        solucao[current_key] = valor.strip()
                    # Se n√£o for uma nova chave, √© a continua√ß√£o da anterior
                    elif current_key and linha.strip(): 
                        solucao[current_key] += '\n' + linha.strip()

                # --- EXIBI√á√ÉO FORMATADA ---
                if 'Nome do Servi√ßo' in solucao and 'Categoria' in solucao:
                    st.subheader(f"{solucao.get('Nome do Servi√ßo', 'N/A')} ({solucao.get('Categoria', 'N/A')})")

                if 'Justificativa T√©cnica' in solucao and solucao['Justificativa T√©cnica'].strip():
                    st.info(f"**Justificativa T√©cnica:** {solucao['Justificativa T√©cnica']}")

                if 'Argumentos de Venda' in solucao and solucao['Argumentos de Venda'].strip():
                    st.success(f"**Argumentos de Venda:**\n{solucao['Argumentos de Venda']}")

            except Exception as e:
                st.error(f"Ocorreu um erro ao contatar a API de IA: {e}")